---

# - name: Gather information about MS Azure Route Table for the VNet Subnet
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_info
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   azure.azcollection.azure_rm_routetable_info:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     name: "name-here"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"

# - name: Ansible MS Azure Route Table append route for SAP HANA HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_hana
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_db_host }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_hana_primary }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_hana_primary] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary] | length>0)

- name: Ansible MS Azure Private DNS Records for SAP HANA HA Virtual Hostname
  no_log: "{{ __sap_vm_provision_no_log }}"
  azure.azcollection.azure_rm_privatednsrecordset:
    # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
    resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
    zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
    relative_name: "{{ sap_swpm_db_host }}"
    record_type: A
    records:
      - entry: "{{ sap_vm_provision_ha_vip_hana_primary | regex_replace('/.*', '') }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ (groups[sap_vm_provision_group_hana_primary] | default([])) }}"
  loop_control:
    loop_var: host_node
  when:
    - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)


# - name: Ansible MS Azure Route Table append route for SAP AnyDB HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_anydb
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_db_host }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_anydb_primary }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_anydb_primary] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary] | length>0)

- name: Ansible MS Azure Private DNS Records for SAP AnyDB HA Virtual Hostname
  no_log: "{{ __sap_vm_provision_no_log }}"
  azure.azcollection.azure_rm_privatednsrecordset:
    # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
    resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
    zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
    relative_name: "{{ sap_swpm_db_host }}"
    record_type: A
    records:
      - entry: "{{ sap_vm_provision_ha_vip_anydb_primary | regex_replace('/.*', '') }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ (groups[sap_vm_provision_group_anydb_primary] | default([])) }}"
  loop_control:
    loop_var: host_node
  when:
    - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0)


# - name: Ansible MS Azure Route Table append route for SAP NetWeaver ASCS HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_netweaver_ascs
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_ascs_instance_hostname }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_nwas_abap_ascs }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_ascs] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers] | length>0)

- name: Ansible MS Azure Private DNS Records for SAP NetWeaver ASCS HA Virtual Hostname
  no_log: "{{ __sap_vm_provision_no_log }}"
  azure.azcollection.azure_rm_privatednsrecordset:
    # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
    resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
    zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
    relative_name: "{{ sap_swpm_ascs_instance_hostname }}"
    record_type: A
    records:
      - entry: "{{ sap_vm_provision_ha_vip_nwas_abap_ascs | regex_replace('/.*', '') }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ (groups[sap_vm_provision_group_nwas_ascs] | default([])) }}"
  loop_control:
    loop_var: host_node
  when:
    - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)


# - name: Ansible MS Azure Route Table append route for SAP NetWeaver ERS HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_netweaver_ers
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_ers_instance_hostname }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_nwas_abap_ers }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_ers] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers] | length>0)

- name: Ansible MS Azure Private DNS Records for SAP NetWeaver ERS HA Virtual Hostname
  no_log: "{{ __sap_vm_provision_no_log }}"
  azure.azcollection.azure_rm_privatednsrecordset:
    # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
    resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
    zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
    relative_name: "{{ sap_swpm_ers_instance_hostname }}"
    record_type: A
    records:
      - entry: "{{ sap_vm_provision_ha_vip_nwas_abap_ers | regex_replace('/.*', '') }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ (groups[sap_vm_provision_group_nwas_ers] | default([])) }}"
  loop_control:
    loop_var: host_node
  when:
    - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)


## For HA of PAS and AAS, if required

# - name: Ansible MS Azure Route Table append route for SAP NetWeaver PAS HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_netweaver_pas
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_pas_instance_hostname }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_nwas_abap_pas }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_pas] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers] | length>0)

# - name: Ansible MS Azure Private DNS Records for SAP NetWeaver PAS HA Virtual Hostname
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   azure.azcollection.azure_rm_privatednsrecordset:
#     # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
#     resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
#     zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
#     relative_name: "{{ sap_swpm_pas_instance_hostname }}"
#     record_type: A
#     records:
#       - entry: "{{ sap_vm_provision_ha_vip_nwas_abap_pas | regex_replace('/.*', '') }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_pas] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)


# - name: Ansible MS Azure Route Table append route for SAP NetWeaver AAS HA
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   register: __sap_vm_provision_task_msazure_vnet_subnet_rt_route_sap_netweaver_aas
#   azure.azcollection.azure_rm_route:
#     resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
#     route_table_name: "{{ __sap_vm_provision_task_msazure_vnet_subnet_rt_info.route_tables[0].id }}"
#     name: "{{ sap_swpm_aas_instance_hostname }}-rt"
#     address_prefix: "{{ sap_vm_provision_ha_vip_nwas_abap_aas }}"
#     next_hop_type: "virtual_appliance"
#     next_hop_ip_address: "{{ hostvars[host_node].ansible_host }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_aas] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers] | length>0)

# - name: Ansible MS Azure Private DNS Records for SAP NetWeaver AAS HA Virtual Hostname
#   no_log: "{{ __sap_vm_provision_no_log }}"
#   azure.azcollection.azure_rm_privatednsrecordset:
#     # DNS may exist in separate Resource Group. Use empty string var (or default false if undefined) to evaluate to false boolean, and use Python or logic operator
#     resource_group: "{{ (sap_vm_provision_msazure_private_dns_resource_group_name | default(false)) or sap_vm_provision_msazure_resource_group_name }}"
#     zone_name: "{{ hostvars[host_node].sap_vm_provision_dns_root_domain }}"
#     relative_name: "{{ sap_swpm_aas_instance_hostname }}"
#     record_type: A
#     records:
#       - entry: "{{ sap_vm_provision_ha_vip_nwas_abap_aas | regex_replace('/.*', '') }}"
#     # Azure credentials
#     subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
#     tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
#     client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
#     secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
#   loop: "{{ (groups[sap_vm_provision_group_nwas_aas] | default([])) }}"
#   loop_control:
#     loop_var: host_node
#   when:
#     - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)


- name: MS Azure IAM Role - Prepare IAM Role name
  ansible.builtin.set_fact:
    __sap_vm_provision_msazure_ha_iam_role:
      "{{ sap_vm_provision_msazure_ha_iam_role
       if sap_vm_provision_msazure_ha_iam_role is defined and sap_vm_provision_msazure_ha_iam_role | length > 0
       else 'Linux Fence Agent Role' }}"

- name: MS Azure IAM Role - Definition
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_msazure_iam_role_fencing
  azure.azcollection.azure_rm_roledefinition:
    name: "{{ __sap_vm_provision_msazure_ha_iam_role }}"
    description: "Allows to power-off and start virtual machines"
    #scope: /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myresourceGroup
    assignable_scopes:
      - "/subscriptions/{{ sap_vm_provision_msazure_subscription_id }}"
    permissions:
      - actions:
          - "Microsoft.Compute/*/read"
          - "Microsoft.Compute/virtualMachines/powerOff/action"
          - "Microsoft.Compute/virtualMachines/start/action"
      # - data_actions:
      # - not_actions:
      # - not_data_actions:
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
    state: present
  # Custom Role can exist within different Subscriptions under same tenant
  # Described in: https://github.com/Azure/azure-powershell/issues/4365#issuecomment-351171763
  # Error is ignored and validated in next step
  ignore_errors: true

  # Second attempt to create Role with last segment of Subscription ID
- name: MS Azure IAM Role - Definition Subscription specific
  when:
    - __sap_vm_provision_task_msazure_iam_role_fencing is defined
    - __sap_vm_provision_task_msazure_iam_role_fencing.failed
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_msazure_iam_role_fencing_sub
  azure.azcollection.azure_rm_roledefinition:
    name: "{{ __sap_vm_provision_msazure_ha_iam_role }} {{ sap_vm_provision_msazure_subscription_id.split('-')[-1] }}"
    description: "Allows to power-off and start virtual machines {{ sap_vm_provision_msazure_subscription_id.split('-')[-1] }}"
    assignable_scopes:
      - "/subscriptions/{{ sap_vm_provision_msazure_subscription_id }}"
    permissions:
      - actions:
          - "Microsoft.Compute/*/read"
          - "Microsoft.Compute/virtualMachines/powerOff/action"
          - "Microsoft.Compute/virtualMachines/start/action"
      # - data_actions:
      # - not_actions:
      # - not_data_actions:
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
    state: present


- name: MS Azure - GenericRestClient call to Virtual Machine API to identify Managed Service Identity (MSI)
  no_log: "{{ __sap_vm_provision_no_log }}"
  register: __sap_vm_provision_task_msazure_vm_info_collect
  azure.azcollection.azure_rm_resource_info:
    resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
    provider: Compute
    resource_type: virtualMachines
    resource_name: "{{ host_node }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ groups_merged_list }}"
  loop_control:
    loop_var: host_node

# Assign to the MSI Object ID (Service Principal ID)
- name: MS Azure IAM Role - Assignment to MS Azure Managed Service Identity (MSI)
  no_log: "{{ __sap_vm_provision_no_log }}"
  azure.azcollection.azure_rm_roleassignment:
    #auth_source: msi
    role_definition_id:
      "{{ __sap_vm_provision_task_msazure_iam_role_fencing.id if __sap_vm_provision_task_msazure_iam_role_fencing.id is defined
        else __sap_vm_provision_task_msazure_iam_role_fencing_sub.id }}"
    scope: "/subscriptions/{{ sap_vm_provision_msazure_subscription_id }}"
    assignee_object_id: "{{ host_node.response[0].identity.principalId | default(none) }}"
    # Azure credentials
    subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
    tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
    client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
    secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
  loop: "{{ __sap_vm_provision_task_msazure_vm_info_collect.results }}"
  loop_control:
    loop_var: host_node
    label: "{{ host_node.response[0].name | default(none) }}" # Use default to avoid "Failed to template 'dict object' has no attribute 'response'"


# Azure Load Balancer Health Check Probe is the destination port upon connection to the virtual machine to check the virtual machine's health status.
# Ensure the virtual machine is also listening on this port (that is, the port is open).
# https://learn.microsoft.com/en-us/azure/load-balancer/manage-probes-how-to
#
# As Linux Pacemaker 'azure-lb' Resource Agent is not started before the Load Balancer Rule is created, must instead use a fake health check response
# Otherwise the Azure Load Balancer Rule will automatically evaluate as all Virtual Machines in the Azure Load Balancer Backend Pool are 'probed DOWN'
#
# Note: ICMP ping requests to the Azure Load Balancer Frontend IP (i.e. Virtual IP) are handled by the Azure Load Balancer,
# the ICMP ping requests are not sent to the Azure Load Balancer Backend Pool virtual machines
# https://learn.microsoft.com/en-us/azure/load-balancer/load-balancer-test-frontend-reachability#usage-considerations
#
# The azure_rm_loadbalancer Ansible Module does not allow backend pool population - https://github.com/ansible-collections/azure/issues/866
# Must use either workaround:
# Opt 1. provision Load Balancer first, then assign vNIC at creation to the Load Balancer backend pool. This failed to register healthy VMs.
# Opt 2. use azure_rm_networkinterface Ansible Module to update-in-place the vNIC and assign to a Load Balancer backend pool.
# Option selected = Opt 2
#
# In addition, the Azure Load Balancer being provisioned before Linux Pacemaker, requires a temporary Health Check Probe port to be used with an an active OS service listening.
# Therefore the Health Check Port probe will use Port 55550/55551/55552 during initial installation, and be switched after the SAP Installation and Linux Pacemaker installation to the correct port number.
# This is because an Azure Load Balancer Rule will trigger the Health Check Probe once any host is added to the Backend Pool,
# and if the host is not listening on the port it will fail, which will mark the resource as unhealthy, the traffic will not be routed to the host and if all hosts fail then the Frontend IP will also fail / not respond to ICMP Ping requests.


- name: Ansible Task block for provisioning of Load Balancer for High Availability
  delegate_to: localhost
  run_once: true
  # Using environment, no_log is ineffective and log will show 'EXEC /bin/sh -c 'ENV_VAR=value python3 /AnsiballZ_ansible_module_name.py && sleep 0'
  # Therefore do not use environment for secrets, use only for non-sensitive values as this will reduce Ansible Task parameters.
  environment:
    ANSIBLE_AZURE_AUTH_SOURCE: "auto" # Set to auto to use module parameters
    # AZURE_SUBSCRIPTION_ID: "{{ sap_vm_provision_msazure_subscription_id }}"
    # AZURE_TENANT: "{{ sap_vm_provision_msazure_tenant_id }}"
    # AZURE_CLIENT_ID: "{{ sap_vm_provision_msazure_app_client_id }}"
    # AZURE_SECRET: "{{ sap_vm_provision_msazure_app_client_secret }}"
  when:
    - sap_ha_pacemaker_cluster_msazure_resource_group is defined
    - (groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary] | length>0)) or (groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers] | length>0)) or (groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary] | length>0))
  block:

    - name: Gather MS Azure Subnet ID
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_msazure_vnet_subnet_info
      azure.azcollection.azure_rm_subnet_info:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        virtual_network_name: "{{ sap_vm_provision_msazure_vnet_name }}"
        name: "{{ sap_vm_provision_msazure_vnet_subnet_name }}"
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"

    - name: Define Ansible Variables for Azure Load Balancer - VIP for SAP HANA
      ansible.builtin.set_fact:
        lb_frontend_virtual_ips1: "{{ lb_frontend_virtual_ips1 | default([]) + [__ip_element] }}"
      vars:
        __ip_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-vip' + (vip_index_nr | string) }}"
          private_ip_address: "{{ vip_item | regex_replace('/.*', '') }}"
          private_ip_allocation_method: "Static"
          subnet: "{{ __sap_vm_provision_task_msazure_vnet_subnet_info.subnets[0].id }}"
          zones: ["1", "2", "3"] # Zone-redundant
      when:
        - vip_item | length > 0
        - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_hana_primary }}"
      loop_control:
        index_var: vip_index_nr
        loop_var: vip_item

    - name: Define Ansible Variables for Azure Load Balancer - VIP for SAP AnyDB
      ansible.builtin.set_fact:
        lb_frontend_virtual_ips1: "{{ lb_frontend_virtual_ips1 | default([]) + [__ip_element] }}"
      vars:
        __ip_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-vip' + (vip_index_nr | string) }}"
          private_ip_address: "{{ vip_item | regex_replace('/.*', '') }}"
          private_ip_allocation_method: "Static"
          subnet: "{{ __sap_vm_provision_task_msazure_vnet_subnet_info.subnets[0].id }}"
          zones: ["1", "2", "3"] # Zone-redundant
      when:
        - vip_item | length > 0
        - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_anydb_primary }}"
      loop_control:
        index_var: vip_index_nr
        loop_var: vip_item

    - name: Define Ansible Variables for Azure Load Balancer - VIP for SAP NetWeaver ASCS/ERS
      ansible.builtin.set_fact:
        lb_frontend_virtual_ips2: "{{ lb_frontend_virtual_ips2 | default([]) + [__ip_element] }}"
      vars:
        __ip_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-vip' + (vip_index_nr | string) }}"
          private_ip_address: "{{ vip_item | regex_replace('/.*', '') }}"
          private_ip_allocation_method: "Static"
          subnet: "{{ __sap_vm_provision_task_msazure_vnet_subnet_info.subnets[0].id }}"
          zones: ["1", "2", "3"] # Zone-redundant
      when:
        - vip_item | length > 0
        - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_nwas_abap_ascs }}"
        - "{{ sap_vm_provision_ha_vip_nwas_abap_ers }}"
      loop_control:
        index_var: vip_index_nr
        loop_var: vip_item


    - name: Define Ansible Variables for Azure Load Balancer - VIP Health Check for SAP HANA
      ansible.builtin.set_fact:
        lb_probes1: "{{ lb_probes1 | default([]) + [__probe_element] }}"
      vars:
        __probe_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-probe-hc-vip' + (sapinstance_index_nr | string) }}"
          protocol: Tcp
          port: "55550" # "{{ ('626' + sapinstance_item | string) | int }}"
          interval: 5
          fail_count: 2
      when:
        - sapinstance_item | length > 0
        - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)
      loop:
        - "{{ sap_system_hana_db_instance_nr | default() }}"
      loop_control:
        index_var: sapinstance_index_nr
        loop_var: sapinstance_item

    - name: Define Ansible Variables for Azure Load Balancer - VIP Health Check for SAP AnyDB
      ansible.builtin.set_fact:
        lb_probes1: "{{ lb_probes1 | default([]) + [__probe_element] }}"
      vars:
        __probe_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-probe-hc-vip' }}"
          protocol: Tcp
          port: "55550" # 62700
          interval: 5
          fail_count: 2
      when:
        - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0)

    - name: Define Ansible Variables for Azure Load Balancer - VIP Health Check for SAP NetWeaver ASCS/ERS
      ansible.builtin.set_fact:
        lb_probes2: "{{ lb_probes2 | default([]) + [__probe_element] }}"
      vars:
        __probe_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-probe-hc-vip' + (sapinstance_index_nr | string) }}"
          protocol: Tcp
          port: "{{ ('5555' + (sapinstance_index_nr + 1) | string) | int }}" # "{{ ('626' + sapinstance_item | string) | int }}"
          interval: 5
          fail_count: 2
      when:
        - sapinstance_item | length > 0
        - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)
      loop:
        - "{{ sap_system_nwas_abap_ascs_instance_nr | default() }}"
        - "{{ sap_system_nwas_abap_ers_instance_nr | default() }}"
      loop_control:
        index_var: sapinstance_index_nr
        loop_var: sapinstance_item


    - name: Define Ansible Variables for Azure Load Balancer - LB Rule for SAP HANA
      ansible.builtin.set_fact:
        lb_rules1: "{{ lb_rules1 | default([]) + [__rule_element] }}"
      vars:
        __rule_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-rule' + (rule_index_nr | string) }}"
          frontend_ip_configuration: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-vip' + (rule_index_nr | string) }}"
          backend_address_pool: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-backend-pool' }}"
          protocol: All
          frontend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          backend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          probe: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-probe-hc-vip' + (rule_index_nr | string) }}"
          load_distribution: Default # Session persistence = None
          idle_timeout: 30 # 30 minutes
          enable_floating_ip: true # enable Frontend IP as a Floating IP (aka. Direct Server Return), if disabled then only 1 LB Rule allowed
      when:
        - rule_item | length > 0
        - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_hana_primary }}"
      loop_control:
        index_var: rule_index_nr
        loop_var: rule_item

    - name: Define Ansible Variables for Azure Load Balancer - LB Rule for SAP AnyDB
      ansible.builtin.set_fact:
        lb_rules1: "{{ lb_rules1 | default([]) + [__rule_element] }}"
      vars:
        __rule_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-rule' + (rule_index_nr | string) }}"
          frontend_ip_configuration: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-vip' + (rule_index_nr | string) }}"
          backend_address_pool: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-backend-pool' }}"
          protocol: All
          frontend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          backend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          probe: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-probe-hc-vip' }}"
          load_distribution: Default # Session persistence = None
          idle_timeout: 30 # 30 minutes
          enable_floating_ip: true # enable Frontend IP as a Floating IP (aka. Direct Server Return), if disabled then only 1 LB Rule allowed
      when:
        - rule_item | length > 0
        - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_anydb_primary }}"
      loop_control:
        index_var: rule_index_nr
        loop_var: rule_item

    - name: Define Ansible Variables for Azure Load Balancer - LB Rule for SAP NetWeaver ASCS/ERS
      ansible.builtin.set_fact:
        lb_rules2: "{{ lb_rules2 | default([]) + [__rule_element] }}"
      vars:
        __rule_element:
          name: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-rule' + (rule_index_nr | string) }}"
          frontend_ip_configuration: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-vip' + (rule_index_nr | string) }}"
          backend_address_pool: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-ascs-backend-pool' }}"
          protocol: All
          frontend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          backend_port: 0 # High Availability Ports (AnyPort), only on Internal Standard Load Balancer
          probe: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-probe-hc-vip' + (rule_index_nr | string) }}"
          load_distribution: Default # Session persistence = None
          idle_timeout: 30 # 30 minutes
          enable_floating_ip: true # enable Frontend IP as a Floating IP (aka. Direct Server Return), if disabled then only 1 LB Rule allowed
      when:
        - rule_item | length > 0
        - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)
      loop:
        - "{{ sap_vm_provision_ha_vip_nwas_abap_ascs }}"
        - "{{ sap_vm_provision_ha_vip_nwas_abap_ers }}"
      loop_control:
        index_var: rule_index_nr
        loop_var: rule_item

    - name: MS Azure Load Balancer (network L4) - Create NLB for SAP HANA with Virtual IP and Health Probe configuration
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_msazure_lb1a_info
      azure.azcollection.azure_rm_loadbalancer:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        name: "{{ sap_vm_provision_ha_load_balancer_name_hana }}"
        sku: "Standard" # AnyPort (HA Port) Protocol rule is not allowed for basic SKU load balancer, use standard SKU load balancer instead
        frontend_ip_configurations: "{{ (lb_frontend_virtual_ips1 | default([])) }}" # "{{ (lb_frontend_virtual_ips1 | default([])) + (lb_frontend_virtual_ips2 | default([])) }}"
        backend_address_pools:
          - name: "{{ sap_vm_provision_ha_load_balancer_name_hana + '-backend-pool' }}"
        probes: "{{ (lb_probes1 | default([])) }}" # "{{ (lb_probes1 | default([])) + (lb_probes2 | default([])) }}"
        load_balancing_rules: "{{ (lb_rules1 | default([])) }}" # "{{ (lb_rules1 | default([])) + (lb_rules2 | default([])) }}"
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      when: (groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0))

    - name: MS Azure Load Balancer (network L4) - Create NLB for SAP AnyDB with Virtual IP and Health Probe configuration
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_msazure_lb1b_info
      azure.azcollection.azure_rm_loadbalancer:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        name: "{{ sap_vm_provision_ha_load_balancer_name_anydb }}"
        sku: "Standard" # AnyPort (HA Port) Protocol rule is not allowed for basic SKU load balancer, use standard SKU load balancer instead
        frontend_ip_configurations: "{{ (lb_frontend_virtual_ips1 | default([])) }}" # "{{ (lb_frontend_virtual_ips1 | default([])) + (lb_frontend_virtual_ips2 | default([])) }}"
        backend_address_pools:
          - name: "{{ sap_vm_provision_ha_load_balancer_name_anydb + '-backend-pool' }}"
        probes: "{{ (lb_probes1 | default([])) }}" # "{{ (lb_probes1 | default([])) + (lb_probes2 | default([])) }}"
        load_balancing_rules: "{{ (lb_rules1 | default([])) }}" # "{{ (lb_rules1 | default([])) + (lb_rules2 | default([])) }}"
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      when: (groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0))

    - name: MS Azure Load Balancer (network L4) - Create NLB for SAP NetWeaver with Virtual IP and Health Probe configuration
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_msazure_lb2_info
      azure.azcollection.azure_rm_loadbalancer:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        name: "{{ sap_vm_provision_ha_load_balancer_name_nwas }}"
        sku: "Standard" # AnyPort (HA Port) Protocol rule is not allowed for basic SKU load balancer, use standard SKU load balancer instead
        frontend_ip_configurations: "{{ (lb_frontend_virtual_ips2 | default([])) }}"
        backend_address_pools:
          - name: "{{ sap_vm_provision_ha_load_balancer_name_nwas + '-ascs-backend-pool' }}"
        probes: "{{ (lb_probes2 | default([])) }}"
        load_balancing_rules: "{{ (lb_rules2 | default([])) }}"
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      when: (groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0))

    - name: MS Azure Load Balancer (network L4) - Define Ansible Variable of Load Balancer for Database Server
      ansible.builtin.set_fact:
        __sap_vm_provision_task_msazure_lb1_info:
          "{{ __sap_vm_provision_task_msazure_lb1a_info
            if (groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0))
            else __sap_vm_provision_task_msazure_lb1b_info
              if (groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0))
              else none }}"

      when: (groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)) or (groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0))

    - name: Set fact to hold loop variables from include_tasks when SAP HANA HA
      ansible.builtin.set_fact:
        lb_ha_sap_hana: "{{ __sap_vm_provision_task_msazure_lb1_info.state.backend_address_pools | selectattr('name', '==', sap_vm_provision_ha_load_balancer_name_hana + '-backend-pool') | map(attribute='id') | first }}"
      when: (groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0))

    - name: Set fact to hold loop variables from include_tasks when SAP AnyDB HA
      ansible.builtin.set_fact:
        lb_ha_sap_anydb: "{{ __sap_vm_provision_task_msazure_lb1_info.state.backend_address_pools | selectattr('name', '==', sap_vm_provision_ha_load_balancer_name_anydb + '-backend-pool') | map(attribute='id') | first }}"
      when: (groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0))

    - name: Set fact to hold loop variables from include_tasks when SAP NetWeaver HA
      ansible.builtin.set_fact:
        lb_ha_sap_nwas: "{{ __sap_vm_provision_task_msazure_lb2_info.state.backend_address_pools | selectattr('name', '==', sap_vm_provision_ha_load_balancer_name_nwas + '-ascs-backend-pool') | map(attribute='id') | first }}"
      when: (groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0))

    - name: Update network interfaces for MS Azure VM - for SAP HANA HA with load balancing
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_provision_host_single_vnic1
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        location: "{{ sap_vm_provision_msazure_location_region }}"
        name: "{{ host_node }}-nic"
        virtual_network: "{{ sap_vm_provision_msazure_vnet_name }}"
        subnet_name: "{{ sap_vm_provision_msazure_vnet_subnet_name }}"
        create_with_security_group: false
        ip_configurations:
          - name: "{{ host_node }}-nic-ipconfig"
            primary: true
            #private_ip_allocation_method: "Static" # When static, must define the specific IP Address
            load_balancer_backend_address_pools:
              - "{{ lb_ha_sap_hana }}"
        enable_accelerated_networking: true
        enable_ip_forwarding: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].disable_ip_anti_spoofing }}" # When disable the Anti IP Spoofing = true, then Enable IP Forwarding = true
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      loop: "{{ groups_merged_list }}"
      loop_control:
        loop_var: host_node
      when:
        - "'hana_' in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][host_node].sap_host_type" # REPLACE with substring in any of the strings contained in the list
        - groups[sap_vm_provision_group_hana_secondary] is defined and (groups[sap_vm_provision_group_hana_secondary]|length>0)

    - name: Update network interfaces for MS Azure VM - for SAP AnyDB HA with load balancing
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_provision_host_single_vnic1
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        location: "{{ sap_vm_provision_msazure_location_region }}"
        name: "{{ host_node }}-nic"
        virtual_network: "{{ sap_vm_provision_msazure_vnet_name }}"
        subnet_name: "{{ sap_vm_provision_msazure_vnet_subnet_name }}"
        create_with_security_group: false
        ip_configurations:
          - name: "{{ host_node }}-nic-ipconfig"
            primary: true
            #private_ip_allocation_method: "Static" # When static, must define the specific IP Address
            load_balancer_backend_address_pools:
              - "{{ lb_ha_sap_anydb }}"
        enable_accelerated_networking: true
        enable_ip_forwarding: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].disable_ip_anti_spoofing }}" # When disable the Anti IP Spoofing = true, then Enable IP Forwarding = true
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      loop: "{{ groups_merged_list }}"
      loop_control:
        loop_var: host_node
      when:
        - "'anydb_' in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][host_node].sap_host_type" # REPLACE with substring in any of the strings contained in the list
        - groups[sap_vm_provision_group_anydb_secondary] is defined and (groups[sap_vm_provision_group_anydb_secondary]|length>0)

    - name: Update network interfaces for MS Azure VM - for SAP NetWeaver HA ASCS/ERS with load balancing
      no_log: "{{ __sap_vm_provision_no_log }}"
      register: __sap_vm_provision_task_provision_host_single_vnic2
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ sap_vm_provision_msazure_resource_group_name }}"
        location: "{{ sap_vm_provision_msazure_location_region }}"
        name: "{{ host_node }}-nic"
        virtual_network: "{{ sap_vm_provision_msazure_vnet_name }}"
        subnet_name: "{{ sap_vm_provision_msazure_vnet_subnet_name }}"
        create_with_security_group: false
        ip_configurations:
          - name: "{{ host_node }}-nic-ipconfig"
            primary: true
            #private_ip_allocation_method: "Static" # When static, must define the specific IP Address
            load_balancer_backend_address_pools:
              - "{{ lb_ha_sap_nwas }}"
        enable_accelerated_networking: true
        enable_ip_forwarding: "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][scaleout_origin_host_spec | default(inventory_hostname)].disable_ip_anti_spoofing }}" # When disable the Anti IP Spoofing = true, then Enable IP Forwarding = true
        # Azure credentials
        subscription_id: "{{ sap_vm_provision_msazure_subscription_id }}"
        tenant: "{{ sap_vm_provision_msazure_tenant_id }}"
        client_id: "{{ sap_vm_provision_msazure_app_client_id }}"
        secret: "{{ sap_vm_provision_msazure_app_client_secret }}"
      loop: "{{ groups_merged_list }}"
      loop_control:
        loop_var: host_node
      when:
        - "sap_vm_provision_group_nwas_ascs in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][host_node].sap_host_type or sap_vm_provision_group_nwas_ers in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][host_node].sap_host_type"  # REPLACE with substring in any of the strings contained in the list
        - groups[sap_vm_provision_group_nwas_ers] is defined and (groups[sap_vm_provision_group_nwas_ers]|length>0)
