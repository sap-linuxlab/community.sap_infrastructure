---
- name: Ensure short hostname is not longer than 13 characters (see SAP Note 611361)
  ansible.builtin.assert:
    that: (inventory_hostname | length | int) <= (13 | int)
    fail_msg: "FAIL: The length of the hostname is {{ inventory_hostname | length | int }} but must be less or equal to 13 characters!"

# When SAP HANA Scale-Out is used, if host name is not in original specifications then strip suffix node number from host name
- name: Set fact when performing SAP HANA Scale-Out
  ansible.builtin.set_fact:
    scaleout_origin_host_spec: "{{ inventory_hostname | regex_replace('^(.+?)\\d*$', '\\1') }}"
  when:
    - sap_hana_scaleout_active_coordinator is defined
    - not item in lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan].keys()

# XXX set to scaleout_origin_host_spec in scale out scenario?
- name: Set fact for VM name
  ansible.builtin.set_fact:
     __sap_vm_provision_register_vm_name: "{{ inventory_hostname }}"

- name: Set fact for VM config
  ansible.builtin.set_fact:
    __sap_vm_provision_register_vm_config: "{{ (lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][__sap_vm_provision_register_vm_name]) }}"

- name: Set fact for download OS Image
  ansible.builtin.set_fact:
    os_image: |-
      {%- set disks_map = [
        {
          'metadata': { 'name': (__sap_vm_provision_register_vm_name + '-boot' | replace('_', '-')) },
          'spec' : {
            'source' : {
              'registry' : {
                'url': __sap_vm_provision_register_vm_config.os_image.url,
                'pullMethod': 'node'
              },
            },
            'storage' : {
              'accessModes': ['ReadWriteMany'],
              'resources': {
                'requests': {
                  'storage': __sap_vm_provision_register_vm_config.os_image.size
                }
              }
            }
          }
        }
      ] -%}
      {{ disks_map }}
  when: __sap_vm_provision_register_vm_config.os_image.url is defined

- name: Set fact for existing OS Image
  ansible.builtin.set_fact:
    os_image: |
      {%- set disks_map = [
        {
          'metadata': { 'name': (__sap_vm_provision_register_vm_name + '-boot' | replace('_', '-')) },
          'spec' : {
            'source' : {
              'pvc' : {
                'name': __sap_vm_provision_register_vm_config.os_image.source_pvc_name,
                'namespace': __sap_vm_provision_register_vm_config.os_image.namespace
              },
            },
            'storage' : {
              'accessModes': ['ReadWriteMany'],
              'resources': {
                'requests': {
                  'storage': __sap_vm_provision_register_vm_config.os_image.size
                }
              }
            }
          }
        }
      ] -%}
      {{ disks_map }}
  when:
    - __sap_vm_provision_register_vm_config.os_image.source_pvc_name is defined
    - __sap_vm_provision_register_vm_config.os_image.namespace is defined

- name: Set fact for storage volume template map
  ansible.builtin.set_fact:
    storage_disks_map: |-
      {% set disks_map = [] -%}
      {% for storage_item in __sap_vm_provision_register_vm_config.storage_definition -%}
              {% set vol = disks_map.extend([
              {
                'metadata': { 'name': (__sap_vm_provision_register_vm_name + '-' + storage_item.name | replace('_', '-')) },
                'spec' : {
                  'source' : {
                    'blank' : {}
                  },
                  'storage' : {
                    'accessModes': ['ReadWriteMany'],
                    'resources': {
                      'requests': {
                        'storage': ((storage_item.disk_size | default(0)) | string) + 'Gi'
                      }
                    },
                    'storageClassName': storage_item.disk_type | default('')
                  }
                }
              }]) %}
      {%- endfor %}
      {{ disks_map }}

- name: Set fact for storage volumes attachment list
  ansible.builtin.set_fact:
    storage_disk_name_list: |-
      {% set disks_simple_map = [] -%}
      {% for list_item in os_image -%}
        {% set vol = disks_simple_map.extend([
        {
          'name': list_item.metadata.name,
          'dataVolume': { 'name': list_item.metadata.name },
        }
        ]) %}
      {%- endfor %}
      {% for list_item in storage_disks_map -%}
        {% set vol = disks_simple_map.extend([
        {
          'name': list_item.metadata.name,
          'dataVolume': { 'name': list_item.metadata.name },
        }
        ]) %}
      {%- endfor %}
      {{ disks_simple_map }}

- name: Set fact for storage volumes attachment list
  ansible.builtin.set_fact:
    storage_disk_name_list: |-
      {% set disks_simple_map = [] -%}
      {% for list_item in os_image -%}
        {% set vol = disks_simple_map.extend([
        {
          'name': list_item.metadata.name,
          'dataVolume': { 'name': list_item.metadata.name },
        }
        ]) %}
      {%- endfor %}
      {% for list_item in storage_disks_map -%}
        {% set vol = disks_simple_map.extend([
        {
          'name': list_item.metadata.name,
          'dataVolume': { 'name': list_item.metadata.name },
        }
        ]) %}
      {%- endfor %}
      {{ disks_simple_map }}

- name: Set fact for disk list
  ansible.builtin.set_fact:
    storage_disk_list: |-
      {% set disks_list_simple = [] -%}
        {% set vol = disks_list_simple.extend([
        {
          'name': __sap_vm_provision_register_vm_name + '-boot' | replace('_', '-'),
          'bootOrder': 1,
          'disk': {
              'bus': 'virtio',
              'io': 'native'
         }
        },
        {
          'name': 'cloudinit',
          'io': 'native',
          'disk': {
              'bus': 'virtio'
         }
        },
        {
          'name': 'downwardmetrics',
          'io': 'native',
          'disk': {
              'bus': 'virtio'
         }
        },
        ]) %}
      {% for list_item in storage_disks_map -%}
        {% set vol = disks_list_simple.extend([
        {
          'name': list_item.metadata.name,
          'io': 'native',
          'disk': {
              'bus': 'virtio'
         }
        }
        ]) %}
      {%- endfor %}
      {{ disks_list_simple }}

- name: Set fact for cloud-init volume
  ansible.builtin.set_fact:
    cloud_init_volume:
      - name: cloudinit
        disk:
          bus: virtio
        cloudInitNoCloud: "{{ __sap_vm_provision_register_vm_config.cloudinit }}"

- name: Set fact for downwardmetrics volume
  ansible.builtin.set_fact:
    downwardmetrics_volume:
      - downwardMetrics: {}
        name: downwardmetrics

- name: Set fact for network interfaces
  ansible.builtin.set_fact:
    __sap_vm_provision_register_network_interfaces: |-
      {% set netifs = [] -%}
      {% for list_item in __sap_vm_provision_register_vm_config.network_definition -%}
        {% set ifs = netifs.extend([
        {
          list_item.type: {},
          'model': list_item.model,
          'name': list_item.name,
        }
        ]) %}
      {%- endfor %}
      {{ netifs }}

- name: Set fact for networks definition
  ansible.builtin.set_fact:
    __sap_vm_provision_register_networks_definition: |-
      {% set networks = [] -%}
      {% for list_item in __sap_vm_provision_register_vm_config.network_definition -%}
        {% set ifs = networks.extend([
        {
          'name': list_item.name,
          'multus': { 'networkName': list_item.networkName}
        }
        ]) %}
      {%- endfor %}
      {{ networks }}

- name: Set fact for VM deploy config
  ansible.builtin.set_fact:
    __sap_vm_provision_register_vm_deploy_config:
      volumes: "{{ storage_disk_name_list + cloud_init_volume + downwardmetrics_volume }}"
      networks: "{{ __sap_vm_provision_register_networks_definition }}"
      domain:
        # shared | auto, auto prevents live migration
        ioThreadsPolicy: shared 
        hostname: "{{ __sap_vm_provision_register_vm_name }}"
        evictionStrategy: LiveMigrate
        terminationGracePeriodSeconds: 1800 # 30 minutes after stop request before VM is force terminated
        resources:
          requests:
            memory: "{{ __sap_vm_provision_register_vm_config.kubevirt_vm_memory_gib + sap_vm_provision_ocp_container_memory_overhead }}Gi" # memory + overhead for container runtime)

        devices:
          networkInterfaceMultiqueue: true
          blockMultiQueue: true
          autoattachMemBalloon: false
          disks: "{{ storage_disk_list }}"
          interfaces: "{{ __sap_vm_provision_register_network_interfaces }}"

        cpu:
          cores: "{{ __sap_vm_provision_register_vm_config.kubevirt_vm_cpu_cores }}"
          threads: "{{ __sap_vm_provision_register_vm_config.kubevirt_vm_cpu_smt }}"
          dedicatedCpuPlacement: true
          model: host-passthrough
          numa:
            guestMappingPassthrough: {}
          features:
            - name: x2apic
              policy: require
            - name: rdtscp
              policy: require
            - name: invtsc
              policy: require

        memory:
          guest: "{{ __sap_vm_provision_register_vm_config.kubevirt_vm_memory_gib }}Gi"
          hugepages:
            pageSize: 1Gi

- name: Provision KubeVirt Virtual Machine
  kubevirt.core.kubevirt_vm:
    api_version: "{{ api_version | default(omit) }}"
    persist_config: "{{ persist_config | default(omit) }}"

    ## Virtual Machine target Hypervisor definition
    namespace: "{{ sap_vm_provision_ocp_target_namespace }}" # Target namespace

    ## Virtual Machine definition
    state: present
    running: true
    wait: true  # ensure Virtual Machine in ready state before exiting Ansible Task
    wait_sleep: 30  # 30 second poll for ready state
    wait_timeout: 600  # 10 minute wait for ready state
    force: "{{ sap_vm_provision_overwrite_vm | default(false) }}"  # Do not replace existing Virtual Machine with same name
    name: "{{ __sap_vm_provision_register_vm_name }}"
    labels:
      app: "{{ __sap_vm_provision_register_vm_name }}"
    # Virtual Disk volume definitions
    data_volume_templates: "{{ storage_disks_map + os_image }}"
    spec: "{{ __sap_vm_provision_register_vm_deploy_config }}"

- name: Check VM status
  register: register_provisioned_host_single_info
  kubevirt.core.kubevirt_vm_info:
    name: "{{ __sap_vm_provision_register_vm_name }}"
    namespace: "{{ sap_vm_provision_ocp_target_namespace }}"

- name: Get VMI details
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachineInstance
    namespace: "{{ sap_vm_provision_ocp_target_namespace }}"
    name: "{{ __sap_vm_provision_register_vm_name }}"
  register: vmi_info
  until: vmi_info.resources[0].status.interfaces[0].ipAddress is defined
  retries: 10
  delay: 30

- debug: var=vmi_info
- debug: var=vmi_info.resources[0].status.interfaces[0].ipAddress

- name: Create fact for delegate host IP
  ansible.builtin.set_fact:
    provisioned_private_ip: "{{ vmi_info.resources[0].status.interfaces[0].ipAddress }}"

#Better do this in outer loop afterwards
#- name: Collect only facts about hardware
#  register: __sap_vm_provision_task_ansible_facts_host_disks_info
#  ansible.builtin.setup:
#    gather_subset:
#      - hardware
#  remote_user: "{{sap_vm_provision_ocp_os_user }}"
#  become: true
#  become_user: root
#  delegate_to: "{{ provisioned_private_ip }}"
#  delegate_facts: false
#  vars:
#    ansible_ssh_common_args: "-o ConnectTimeout=180 -o ControlMaster=auto -o ControlPersist=3600s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ForwardX11=no -o ProxyJump={{ __sap_vm_provision_register_jumphost_user }}@{{ sap_vm_provision_jumphost }}"

#- name: Output disks
#  ansible.builtin.debug:
#    var: hostvars[inventory_hostname].ansible_devices.keys() | list

#- name: Debug Ansible Facts devices used list
#  ansible.builtin.debug:
#    msg: "{{ __sap_vm_provision_task_ansible_facts_host_disks_info.ansible_facts.ansible_device_links.ids.keys() | list }}"

# How should this datastructure look like? when just using the provisioned_private_ip there is no need to use combine (would need two dicts). Using VMI info for now
- name: Append loop value to register
  ansible.builtin.set_fact:
    __sap_vm_provision_task_provision_host_single: "{{ vmi_info | combine( { 'host_node' : inventory_hostname } , { 'sap_host_type' : __sap_vm_provision_register_vm_config.sap_host_type } , { 'sap_system_type' : (__sap_vm_provision_register_vm_config.sap_system_type | default('')) }, {'provisioned_private_ip': provisioned_private_ip } ) }}"

- name: Append output to merged register
  ansible.builtin.set_fact:
    register_provisioned_host_all: "{{ register_provisioned_host_all + [__sap_vm_provision_task_provision_host_single] }}"
